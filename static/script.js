let hp = 100; // –õ–æ–∫–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è HP
const userId = new URLSearchParams(window.location.search).get("user_id"); // –û—Ç—Ä–∏–º—É—î–º–æ user_id –∑ URL

if (!userId) {
    alert("Error: User ID is missing in the URL!");
    throw new Error("User ID is missing");
}
console.log("User ID:", userId);


// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
function updateUI(balance, currentHp, damage) {
    document.getElementById("balance").innerText = balance;
    document.getElementById("hp").innerText = currentHp;
    document.getElementById("hp-progress").style.width = Math.max(0, (currentHp / 100) * 100) + "%";
    hp = currentHp;
    if (damage !== null) {
        localStorage.setItem("damage", damage); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É—Ä–æ–Ω –ª–æ–∫–∞–ª—å–Ω–æ
    }
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑ —Å–µ—Ä–≤–µ—Ä–∞
async function loadStats() {
    try {
        const response = await fetch("/api/stats", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ user_id: userId, username: "YourUsername" }) // –ü–µ—Ä–µ–¥–∞—î–º–æ —ñ–º'—è
        });

        if (!response.ok) throw new Error(`Server error: ${response.status}`);

        const data = await response.json();
        console.log("Server response:", data);

        updateUI(data.balance, data.hp, data.damage);
    } catch (error) {
        console.error("Failed to load stats:", error);
        updateUI("Error", "Error", null);
    }
}


// –û–±—Ä–æ–±–∫–∞ –∫–ª—ñ–∫—ñ–≤ –ø–æ –º–æ–Ω—Å—Ç—Ä—É
async function hitMonster() {
    try {
        const response = await fetch("/api/hit", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ user_id: userId })
        });

        if (!response.ok) throw new Error(`Server error: ${response.status}`);
        const data = await response.json();

        updateUI(data.balance, data.hp, localStorage.getItem("damage"));
    } catch (error) {
        console.error("Failed to hit monster:", error);
    }
}

// –û–±—Ä–æ–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ–∫—Ä–∞—â–µ–Ω—å
async function buyUpgrade(type) {
    try {
        const response = await fetch("/api/buy", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ user_id: userId, type: type })
        });

        if (!response.ok) throw new Error(`Server error: ${response.status}`);

        const data = await response.json();

        if (data.success) {
            alert("üéâ Upgrade successful!");
            updateUI(data.balance, hp, data.damage); // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å —ñ —É—Ä–æ–Ω
        } else {
            alert("‚ùå " + data.message);
        }
    } catch (error) {
        console.error("Error during upgrade:", error);
    }
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø–µ—Ä–µ–¥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º –ø–æ–¥—ñ–π
if (document.getElementById("monster")) {
    document.getElementById("monster").addEventListener("click", hitMonster);
}
if (document.getElementById("buy-damage")) {
    document.getElementById("buy-damage").addEventListener("click", () => buyUpgrade("damage"));
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
window.onload = loadStats;
